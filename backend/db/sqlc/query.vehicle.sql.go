// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.vehicle.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getVehicleByID = `-- name: GetVehicleByID :one
SELECT v_id, account_id, plate_number FROM vehicle_data WHERE v_id = $1
`

func (q *Queries) GetVehicleByID(ctx context.Context, vID string) (VehicleDatum, error) {
	row := q.db.QueryRowContext(ctx, getVehicleByID, vID)
	var i VehicleDatum
	err := row.Scan(&i.VID, &i.AccountID, &i.PlateNumber)
	return i, err
}

const insertVehicle = `-- name: InsertVehicle :one
INSERT INTO vehicle_data (v_id, account_id, plate_number) VALUES ($1, $2, $3) RETURNING v_id, account_id, plate_number
`

type InsertVehicleParams struct {
	VID         string         `json:"v_id"`
	AccountID   sql.NullString `json:"account_id"`
	PlateNumber sql.NullString `json:"plate_number"`
}

func (q *Queries) InsertVehicle(ctx context.Context, arg InsertVehicleParams) (VehicleDatum, error) {
	row := q.db.QueryRowContext(ctx, insertVehicle, arg.VID, arg.AccountID, arg.PlateNumber)
	var i VehicleDatum
	err := row.Scan(&i.VID, &i.AccountID, &i.PlateNumber)
	return i, err
}

const updateVehicle = `-- name: UpdateVehicle :one
UPDATE vehicle_data SET account_id = $2, plate_number = $3 WHERE v_id = $1 RETURNING v_id, account_id, plate_number
`

type UpdateVehicleParams struct {
	VID         string         `json:"v_id"`
	AccountID   sql.NullString `json:"account_id"`
	PlateNumber sql.NullString `json:"plate_number"`
}

func (q *Queries) UpdateVehicle(ctx context.Context, arg UpdateVehicleParams) (VehicleDatum, error) {
	row := q.db.QueryRowContext(ctx, updateVehicle, arg.VID, arg.AccountID, arg.PlateNumber)
	var i VehicleDatum
	err := row.Scan(&i.VID, &i.AccountID, &i.PlateNumber)
	return i, err
}
